# Maintained by: RehabMan for: Laptop Patches
#battery_Thunderobot-911-Air.txt

# created by Rover 2019-11-09

# works for:
#  Thunderobot 911-Air

# 16-bit registers
into device label EC0 code_regex FSPD,\s+16, replace_matched begin SPD0,8,SPD1,8, end;
into device label WMIA code_regex FSPD,\s+16, replace_matched begin SPD0,8,SPD1,8, end;
into device label EC0 code_regex DSCP,\s+16, replace_matched begin SCP0,8,SCP1,8, end;
into device label EC0 code_regex LACP,\s+16, replace_matched begin ACP0,8,ACP1,8, end;
into device label EC0 code_regex DSVG,\s+16, replace_matched begin SVG0,8,SVG1,8, end;
into device label EC0 code_regex MCUR,\s+16, replace_matched begin CUR0,8,CUR1,8, end;
into device label EC0 code_regex MBRM,\s+16, replace_matched begin BRM0,8,BRM1,8, end;
into device label EC0 code_regex MBCV,\s+16, replace_matched begin BCV0,8,BCV1,8, end;
into device label EC0 code_regex FN1R,\s+16, replace_matched begin N1R0,8,N1R1,8, end;
into device label EC0 code_regex FN2R,\s+16, replace_matched begin N2R0,8,N2R1,8, end;

# 32-bit registers
into device label EC0 code_regex VERN,\s+32 replace_matched begin ERN0,8,ERN1,8,ERN2,8,ERN3,8 end;

# fix 16-bit methods
into method label UPBI code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.DSCP\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.SCP0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.SCP1)) end;
into method label UPBI code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.LACP\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.ACP0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.ACP1)) end;
into method label UPBI code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.DSVG\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.SVG0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.SVG1)) end;
into method label UPBS code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.DSCP\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.SCP0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.SCP1)) end;
into method label UPBS code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.MCUR\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.CUR0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.CUR1)) end;
into method label UPBS code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.MBRM\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.BRM0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.BRM1)) end;
into method label UPBS code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.MBCV\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.BCV0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.BCV1)) end;
into method label WSAA code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.FN1R\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.N1R0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.N1R1)) end;
into method label WSAA code_regex \^\^PCI0.LPCB.EC0.ECRD\s\(RefOf\s\(\^\^PCI0.LPCB.EC0.FN2R\) replaceall_matched begin B1B2(^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.N2R0)),^^PCI0.LPCB.EC0.ECRD (RefOf (^^PCI0.LPCB.EC0.N2R1)) end;

# fix 32-bit methods
into method label WMAB code_regex \^\^EC0.ECRD\s\(RefOf\s\(\^\^EC0.VERN replaceall_matched begin B1B4(^^EC0.ECRD (RefOf (^^EC0.ERN0)),^^EC0.ECRD (RefOf (^^EC0.ERN1)),^^EC0.ECRD (RefOf (^^EC0.ERN2)),^^EC0.ECRD (RefOf (^^EC0.ERN2) end;
into method label WMBB code_regex \^\^EC0.ECRD\s\(RefOf\s\(\^\^EC0.VERN replaceall_matched begin B1B4(^^EC0.ECRD (RefOf (^^EC0.ERN0)),^^EC0.ECRD (RefOf (^^EC0.ERN1)),^^EC0.ECRD (RefOf (^^EC0.ERN2)),^^EC0.ECRD (RefOf (^^EC0.ERN2) end;

# 64-bit registers
into device label EC0 code_regex BANA,\s+(64), replace_matched begin BANX,64, end;

# fix 64-bit methods
into method label IVBI code_regex RefOf\s\(\^\^PCI0.LPCB.EC0.BANA replaceall_matched begin ^^PCI0.LPCB.EC0.WECB(0x77,64,Zero end;

into method label B1B2 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B2, 2, NotSerialized)\n
{\n
Return(Or(Arg0, ShiftLeft(Arg1, 8)))\n
}\n
end;

into method label B1B4 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B4, 4, NotSerialized)\n
{\n
    Store(Arg3, Local0)\n
    Or(Arg2, ShiftLeft(Local0, 8), Local0)\n
    Or(Arg1, ShiftLeft(Local0, 8), Local0)\n
    Or(Arg0, ShiftLeft(Local0, 8), Local0)\n
    Return(Local0)\n
}\n
end;

into method label WE1B label EC0 remove_entry;
into method label WECB label EC0 remove_entry;
into device label EC0 insert
begin
Method (WE1B, 2, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Store(Arg1, BYTE)\n
}\n
Method (WECB, 3, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
// Arg2 - value to write\n
{\n
    ShiftRight(Arg1, 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Store(Arg2, TEMP)\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
}\n
end;
