#Maintained by: RehabMan for: Laptop Patches
#battery_Surface-Pro-v3.txt

# created by Ravi C (wen1) 2015-02-08

# works for:
#  Microsoft Surface Pro 3

# FUNCTIONS
into method label B1B2 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B2, 2, NotSerialized) { Return(Or(Arg0, ShiftLeft(Arg1, 8))) }\n
end;

into method label B1B4 remove_entry;
into definitionblock code_regex . insert
begin
Method (B1B4, 4, NotSerialized)\n
{\n
    Store(Arg3, Local0)\n
    Or(Arg2, ShiftLeft(Local0, 8), Local0)\n
    Or(Arg1, ShiftLeft(Local0, 8), Local0)\n
    Or(Arg0, ShiftLeft(Local0, 8), Local0)\n
    Return(Local0)\n
}\n
end;


# utility methods to read/write buffers from/to EC
into method label RE1B parent_label EC0 remove_entry;
into method label RECB parent_label EC0 remove_entry;
into device label EC0 insert
begin
Method (RE1B, 1, NotSerialized)\n
{\n
    OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n
    Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n
    Return(BYTE)\n
}\n
Method (RECB, 2, Serialized)\n
// Arg0 - offset in bytes from zero-based EC\n
// Arg1 - size of buffer in bits\n
{\n
    ShiftRight(Add(Arg1,7), 3, Arg1)\n
    Name(TEMP, Buffer(Arg1) { })\n
    Add(Arg0, Arg1, Arg1)\n
    Store(0, Local0)\n
    While (LLess(Arg0, Arg1))\n
    {\n
        Store(RE1B(Arg0), Index(TEMP, Local0))\n
        Increment(Arg0)\n
        Increment(Local0)\n
    }\n
    Return(TEMP)\n
}\n
end;

# 16-bit REGISTERS
into device label EC0 code_regex B0VL,\s+16, replace_matched begin VL00,8,VL01,8, end;
into device label EC0 code_regex B0CR,\s+16, replace_matched begin CR00,8,CR01,8, end;
into device label EC0 code_regex B0RC,\s+16, replace_matched begin RC00,8,RC01,8, end;
into device label EC0 code_regex B0FC,\s+16, replace_matched begin FC00,8,FC01,8, end;
into device label EC0 code_regex B0CC,\s+16, replace_matched begin CC00,8,CC01,8, end;
into device label EC0 code_regex B0DC,\s+16, replace_matched begin DC00,8,DC01,8, end;
into device label EC0 code_regex B0DV,\s+16, replace_matched begin DV00,8,DV01,8, end;
into device label EC0 code_regex B1VL,\s+16, replace_matched begin VL10,8,VL11,8, end;
into device label EC0 code_regex B1CR,\s+16, replace_matched begin CR10,8,CR11,8, end;
into device label EC0 code_regex B1RC,\s+16, replace_matched begin RC10,8,RC11,8, end;
into device label EC0 code_regex B1FC,\s+16, replace_matched begin FC10,8,FC11,8, end;
into device label EC0 code_regex B1CC,\s+16, replace_matched begin CC10,8,CC11,8, end;
into device label EC0 code_regex B1DC,\s+16, replace_matched begin DC10,8,DC11,8, end;
into device label EC0 code_regex B1DV,\s+16, replace_matched begin DV10,8,DV11,8, end;
into device label EC0 code_regex B0AH,\s+16, replace_matched begin AH00,8,AH01,8, end;
into device label EC0 code_regex B1AH,\s+16, replace_matched begin AH10,8,AH11,8, end;

# 32-bit REGISTERS
into device label EC0 code_regex SMFV,\s+32 replace_matched begin MFV0,8,MFV1,8,MFV2,8,MFV3,8 end;
into device label EC0 code_regex B0SN,\s+32 replace_matched begin SN00,8,SN01,8,SN02,8,SN03,8 end;

# 16-bit METHODS
into_all method parent_label EC0 code_regex \(B0VL, replace_matched begin (B1B2(VL00,VL01), end;
into_all method parent_label EC0 code_regex =\s+B0VL replace_matched begin =B1B2(VL00,VL01) end;
into_all method parent_label EC0 code_regex \(B0CR, replace_matched begin (B1B2(CR00,CR01), end;
into_all method parent_label EC0 code_regex =\s+B0CR replace_matched begin =B1B2(CR00,CR01) end;  //it happens
into_all method parent_label EC0 code_regex \(B0RC, replace_matched begin (B1B2(RC00,RC01), end;
into_all method parent_label EC0 code_regex =\s+B0RC replace_matched begin =B1B2(RC00,RC01) end;
into_all method parent_label EC0 code_regex \(B0FC, replace_matched begin (B1B2(FC00,FC01), end;
into_all method parent_label EC0 code_regex =\s+B0FC replace_matched begin =B1B2(FC00,FC01) end;
into_all method parent_label EC0 code_regex \(B0DC, replace_matched begin (B1B2(DC00,DC01), end;
into_all method parent_label EC0 code_regex =\s+B0DC replace_matched begin =B1B2(DC00,DC01) end;
into_all method parent_label EC0 code_regex \(B0DV, replace_matched begin (B1B2(DV00,DV01), end;
into_all method parent_label EC0 code_regex =\s+B0DV replace_matched begin =B1B2(DV00,DV01) end;
into_all method parent_label EC0 code_regex \(B1DC, replace_matched begin (B1B2(DC10,DC11), end;
into_all method parent_label EC0 code_regex =\s+B1DC replace_matched begin =B1B2(DC10,DC11) end;
into_all method parent_label EC0 code_regex \(B1FC, replace_matched begin (B1B2(FC10,FC11), end;
into_all method parent_label EC0 code_regex =\s+B1FC replace_matched begin =B1B2(FC10,FC11) end;
into_all method parent_label EC0 code_regex \(B1DV, replace_matched begin (B1B2(DV10,DV11), end;
into_all method parent_label EC0 code_regex =\s+B1DV replace_matched begin =B1B2(DV10,DV11) end;
into_all method parent_label EC0 code_regex \(B1CR, replace_matched begin (B1B2(CR10,CR11), end;
into_all method parent_label EC0 code_regex =\s+B1CR replace_matched begin =B1B2(CR10,CR11) end;
into_all method parent_label EC0 code_regex \(B1RC, replace_matched begin (B1B2(RC10,RC11), end;
into_all method parent_label EC0 code_regex =\s+B1RC replace_matched begin =B1B2(RC10,RC11) end;
into_all method parent_label EC0 code_regex \(B1VL, replace_matched begin (B1B2(VL10,VL11), end;
into_all method parent_label EC0 code_regex =\s+B1VL replace_matched begin =B1B2(VL10,VL11) end;
into_all method parent_label BAT0 code_regex \(\^\^SBRG.EC0.B0CC, replace_matched begin (B1B2(^^SBRG.EC0.CC00,^^SBRG.EC0.CC01), end;
into_all method parent_label BAT0 code_regex =\s+\^\^SBRG.EC0.B0CC replace_matched begin =B1B2(^^SBRG.EC0.CC00,^^SBRG.EC0.CC01) end;
into_all method parent_label BAT0 code_regex \(\^\^SBRG.EC0.B0RC, replace_matched begin (B1B2(^^SBRG.EC0.RC00,^^SBRG.EC0.RC01), end;
into_all method parent_label BAT0 code_regex =\s+\^\^SBRG.EC0.B0RC replace_matched begin =B1B2(^^SBRG.EC0.RC00,^^SBRG.EC0.RC01) end;
into_all method parent_label BAT1 code_regex \(\^\^SBRG.EC0.B1RC, replace_matched begin (B1B2(^^SBRG.EC0.RC10,^^SBRG.EC0.RC11), end;
into_all method parent_label BAT1 code_regex =\s+\^\^SBRG.EC0.B1RC replace_matched begin =B1B2(^^SBRG.EC0.RC10,^^SBRG.EC0.RC11) end;
into_all method parent_label BAT1 code_regex \(\^\^SBRG.EC0.B1CC, replace_matched begin (B1B2(^^SBRG.EC0.CC10,^^SBRG.EC0.CC11), end;
into_all method parent_label BAT1 code_regex =\s+\^\^SBRG.EC0.B1CC replace_matched begin =B1B2(^^SBRG.EC0.CC10,^^SBRG.EC0.CC11) end;

# 32-bit METHODS
into method label _HRV code_regex \(\^\^\^SBRG\.EC0\.SMFV, replaceall_matched begin (B1B4(^^^SBRG.EC0.MFV0,^^^SBRG.EC0.MFV1,^^^SBRG.EC0.MFV2,^^^SBRG.EC0.MFV3), end;
into method label _HRV code_regex =\s+\^\^\^SBRG\.EC0\.SMFV replaceall_matched begin =B1B4(^^^SBRG.EC0.MFV0,^^^SBRG.EC0.MFV1,^^^SBRG.EC0.MFV2,^^^SBRG.EC0.MFV3) end;
into method label FBIF code_regex \(\^\^SBRG\.EC0\.B0SN replaceall_matched begin (B1B4(^^SBRG.EC0.SN00,^^SBRG.EC0.SN01,^^SBRG.EC0.SN02,^^SBRG.EC0.SN03) end;
into method label FBIF code_regex =\s+\^\^SBRG\.EC0\.B0SN replaceall_matched begin =B1B4(^^SBRG.EC0.SN00,^^SBRG.EC0.SN01,^^SBRG.EC0.SN02,^^SBRG.EC0.SN03) end;

# Large REGISTERS
into device label EC0 code_regex (B0MN,)\s+(96) replace_matched begin BXMN,%2,//%1%2 end;
into device label EC0 code_regex (B0DN,)\s+(64) replace_matched begin BXDN,%2,//%1%2 end;
into device label EC0 code_regex (B0CM,)\s+(48) replace_matched begin BXCM,%2,//%1%2 end;

// B0MN to BXMN //offset 0x75
// B0DN to BXDN //offset 0x81
// B0CM to BXCM //offset 0x89

into method label FBIF code_regex \^\^SBRG\.EC0\.B0MN replaceall_matched begin ^^SBRG.EC0.RECB(0x75,96) end;
into method label FBIF code_regex \^\^SBRG\.EC0\.B0DN replaceall_matched begin ^^SBRG.EC0.RECB(0x81,64) end;
into method label FBIF code_regex \^\^SBRG\.EC0\.B0CM replaceall_matched begin ^^SBRG.EC0.RECB(0x89,48) end;

# WRITES
into method label _BTP code_regex Store\s+\(Arg0,\s+\^\^SBRG\.EC0\.B0AH\) replace_matched begin Store(Arg0, ^^SBRG.EC0.AH00) Store(ShiftRight(Arg0, 8), ^^SBRG.EC0.AH01) end;
into method label _BTP code_regex Store\s+\(0x05,\s+\^\^SBRG\.EC0\.B0AH\) replace_matched begin Store(0x05, ^^SBRG.EC0.AH00) Store(ShiftRight(0x05, 8), ^^SBRG.EC0.AH01) end;

# Also ran into this form of the same above
into method label _BTP code_regex \^\^SBRG\.EC0\.B0AH\s+=\s+Arg0 replace_matched begin Store(Arg0, ^^SBRG.EC0.AH00) Store(ShiftRight(Arg0, 8), ^^SBRG.EC0.AH01) end;
into method label _BTP code_regex \^\^SBRG\.EC0\.B0AH\s+=\s+0x05 replace_matched begin Store(0x05, ^^SBRG.EC0.AH00) Store(ShiftRight(0x05, 8), ^^SBRG.EC0.AH01) end;


into method label _BTP code_regex Store\s+\(Arg0,\s+\^\^SBRG\.EC0\.B1AH\) replace_matched begin Store(Arg0, ^^SBRG.EC0.AH10) Store(ShiftRight(Arg0, 8), ^^SBRG.EC0.AH11) end;
into method label _BTP code_regex Store\s+\(0x05,\s+\^\^SBRG\.EC0\.B1AH\) replace_matched begin Store(0x05, ^^SBRG.EC0.AH10) Store(ShiftRight(0x05, 8), ^^SBRG.EC0.AH11) end;

# Also ran into this form of the same above
into method label _BTP code_regex \^\^SBRG\.EC0\.B1AH\s+=\s+Arg0 replace_matched begin Store(Arg0, ^^SBRG.EC0.AH10) Store(ShiftRight(Arg0, 8), ^^SBRG.EC0.AH11) end;
into method label _BTP code_regex \^\^SBRG\.EC0\.B1AH\s+=\s+0x05 replace_matched begin Store(0x05, ^^SBRG.EC0.AH10) Store(ShiftRight(0x05, 8), ^^SBRG.EC0.AH11) end;


# Remove bat1 for bat0
#into device label EC0 code_regex BAT1 replace_matched begin BAT0 end;